{"version":3,"sources":["components/Todo.jsx","App.js","serviceWorker.js","index.js"],"names":["Todo","state","status","props","statusChangeHandler","setState","deleteTodoHandler","id","styles","backgroundColor","this","fontSize","width","margin","padding","borderRadius","Fragment","style","title","onClick","type","name","className","value","Component","App","todos","completed","filter","todo","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0NAiDeA,G,iNA7CbC,MAAQ,CACNC,OAAQ,EAAKC,MAAMD,Q,EAGrBE,oBAAsB,WACpB,IAAMF,EAAS,EAAKD,MAAMC,OAC1B,EAAKG,SAAS,CAAEH,QAASA,K,EAG3BI,kBAAoB,WAClB,IAAMC,EAAK,EAAKJ,MAAMI,GACtB,EAAKJ,MAAMG,kBAAkBC,I,uDAI7B,IAAMC,EAAS,CACbC,gBAAiBC,KAAKT,MAAMC,OAAS,UAAY,UACjDS,SAAU,SACVC,MAAO,MACPC,OAAQ,cACRC,QAAS,MACTC,aAAc,OAEhB,OACE,kBAAC,IAAMC,SAAP,KACE,uBAAGC,MAAOT,GACPE,KAAKP,MAAMe,MAAO,IACnB,2BACEC,QAAST,KAAKN,oBACdgB,KAAK,WACLC,KAAK,WACLd,GAAG,KAEL,2BACEe,UAAU,oBACVF,KAAK,SACLG,MAAM,SACNJ,QAAST,KAAKJ,0B,GAtCPkB,cC2DJC,E,4MAxDbxB,MAAQ,CACNyB,MAAO,CACL,CACEnB,GAAI,EACJW,MAAO,QACPS,WAAW,GAEb,CACEpB,GAAI,EACJW,MAAO,OACPS,WAAW,GAEb,CACEpB,GAAI,EACJW,MAAO,QACPS,WAAW,GAEb,CACEpB,GAAI,EACJW,MAAO,OACPS,WAAW,GAEb,CACEpB,GAAI,EACJW,MAAO,WACPS,WAAW,K,EAKjBrB,kBAAoB,SAACC,GACnB,EAAKF,SAAS,CACZqB,MAAM,YAAK,EAAKzB,MAAMyB,MAAME,QAAO,SAACC,GAAD,OAAUA,EAAKtB,KAAOA,S,uDAInD,IAAD,OACDmB,EAAQhB,KAAKT,MAAMyB,MAAMI,KAAI,SAACD,GAAD,OACjC,kBAAC,EAAD,CACEE,IAAKF,EAAKtB,GACVA,GAAIsB,EAAKtB,GACTW,MAAOW,EAAKX,MACZhB,OAAQ2B,EAAKF,UACbrB,kBAAmB,EAAKA,uBAI5B,OACE,yBAAKgB,UAAU,OACb,4CACA,6BAAMI,Q,GAnDIF,aCOEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4d6214a5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"../App.css\";\n\nclass Todo extends Component {\n  state = {\n    status: this.props.status,\n  };\n\n  statusChangeHandler = () => {\n    const status = this.state.status;\n    this.setState({ status: !status });\n  };\n\n  deleteTodoHandler = () => {\n    const id = this.props.id;\n    this.props.deleteTodoHandler(id);\n  };\n\n  render() {\n    const styles = {\n      backgroundColor: this.state.status ? \"#e3f6f5\" : \"#bae8e8\",\n      fontSize: \"1.5rem\",\n      width: \"50%\",\n      margin: \"0.5rem auto\",\n      padding: \"5px\",\n      borderRadius: \"5px\",\n    };\n    return (\n      <React.Fragment>\n        <p style={styles}>\n          {this.props.title}{\" \"}\n          <input\n            onClick={this.statusChangeHandler}\n            type=\"checkbox\"\n            name=\"Checkbox\"\n            id=\"\"\n          />\n          <input\n            className=\"btn btn-danger mr\"\n            type=\"button\"\n            value=\"Delete\"\n            onClick={this.deleteTodoHandler}\n          />\n        </p>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Todo;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Todo from \"./components/Todo\";\n\nclass App extends Component {\n  state = {\n    todos: [\n      {\n        id: 1,\n        title: \"Sleep\",\n        completed: true,\n      },\n      {\n        id: 2,\n        title: \"Work\",\n        completed: true,\n      },\n      {\n        id: 3,\n        title: \"Study\",\n        completed: true,\n      },\n      {\n        id: 4,\n        title: \"Play\",\n        completed: true,\n      },\n      {\n        id: 5,\n        title: \"Exercise\",\n        completed: true,\n      },\n    ],\n  };\n\n  deleteTodoHandler = (id) => {\n    this.setState({\n      todos: [...this.state.todos.filter((todo) => todo.id !== id)],\n    });\n  };\n\n  render() {\n    const todos = this.state.todos.map((todo) => (\n      <Todo\n        key={todo.id}\n        id={todo.id}\n        title={todo.title}\n        status={todo.completed}\n        deleteTodoHandler={this.deleteTodoHandler}\n      />\n    ));\n\n    return (\n      <div className=\"App\">\n        <h1>Things To Do</h1>\n        <div>{todos}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}