{"version":3,"sources":["components/Todo.jsx","components/AddTodo.jsx","App.js","serviceWorker.js","index.js"],"names":["Todo","state","status","props","statusChangeHandler","setState","deleteTodoHandler","id","styles","backgroundColor","this","fontSize","width","margin","padding","borderRadius","Fragment","style","title","onClick","type","name","className","value","Component","AddTodo","useState","setTitle","newTodo","newId","completed","onSubmit","e","preventDefault","addTodoHandler","onChange","target","App","todos","filter","todo","console","log","newItem","concat","map","key","length","addTodo","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+PAiDeA,G,iNA7CbC,MAAQ,CACNC,OAAQ,EAAKC,MAAMD,Q,EAGrBE,oBAAsB,WACpB,IAAMF,EAAS,EAAKD,MAAMC,OAC1B,EAAKG,SAAS,CAAEH,QAASA,K,EAG3BI,kBAAoB,WAClB,IAAMC,EAAK,EAAKJ,MAAMI,GACtB,EAAKJ,MAAMG,kBAAkBC,I,uDAI7B,IAAMC,EAAS,CACbC,gBAAiBC,KAAKT,MAAMC,OAAS,UAAY,UACjDS,SAAU,SACVC,MAAO,MACPC,OAAQ,cACRC,QAAS,MACTC,aAAc,OAEhB,OACE,kBAAC,IAAMC,SAAP,KACE,uBAAGC,MAAOT,GACPE,KAAKP,MAAMe,MAAO,IACnB,2BACEC,QAAST,KAAKN,oBACdgB,KAAK,WACLC,KAAK,WACLd,GAAG,KAEL,2BACEe,UAAU,2BACVF,KAAK,SACLG,MAAM,SACNJ,QAAST,KAAKJ,0B,GAtCPkB,c,QC6BJC,EA9BC,SAACtB,GAAW,IAAD,EACCuB,mBAAS,IADV,mBAClBR,EADkB,KACXS,EADW,KAEnBC,EAAU,CACdrB,GAAIJ,EAAM0B,MAAQ,EAClBX,MAAOA,EACPY,WAAW,GAUb,OACE,6BACE,0BAAMC,SAVa,SAACC,GACtBA,EAAEC,iBACF9B,EAAM+B,eAAeN,GACrBD,EAAS,MAQL,2BACEL,UAAU,eACVF,KAAK,OACLG,MAAOK,EAAQV,MACfiB,SAVS,SAACH,GAChBL,EAASK,EAAEI,OAAOb,UAWd,2BAAOD,UAAU,2BAA2BF,KAAK,cC6B1CiB,E,4MAhDbpC,MAAQ,CACNqC,MAAO,CACL,CACE/B,GAAI,K,EAKVD,kBAAoB,SAACC,GACnB,EAAKF,SAAS,CACZiC,MAAM,YAAK,EAAKrC,MAAMqC,MAAMC,QAAO,SAACC,GAAD,OAAUA,EAAKjC,KAAOA,S,EAI7D2B,eAAiB,SAAC3B,GAChBkC,QAAQC,IAAInC,GACZ,IAAMoC,EAAU,EAAK1C,MAAMqC,MAAMM,OAAOrC,GACxC,EAAKF,SAAS,CAAEiC,MAAOK,K,uDAGf,IAAD,OAEDL,EADc5B,KAAKT,MAAMqC,MAAMC,QAAO,SAACC,GAAD,OAAUA,EAAKjC,GAAK,KACtCsC,KAAI,SAACL,GAAD,OAC5B,kBAAC,EAAD,CACEM,IAAKN,EAAKjC,GACVA,GAAIiC,EAAKjC,GACTW,MAAOsB,EAAKtB,MACZhB,OAAQsC,EAAKV,UACbxB,kBAAmB,EAAKA,uBAItBuB,EAAQnB,KAAKT,MAAMqC,MAAM5B,KAAKT,MAAMqC,MAAMS,OAAS,GAAGxC,GAEtDyC,EACJ,kBAAC,EAAD,CAASnB,MAAOA,EAAOK,eAAgBxB,KAAKwB,iBAG9C,OACE,yBAAKZ,UAAU,OACb,4CACA,yBAAKL,MAAO,CAAEgC,UAAW,SAAWX,GACpC,6BAAMU,Q,GA3CIxB,aCME0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,a","file":"static/js/main.8164b773.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"../App.css\";\n\nclass Todo extends Component {\n  state = {\n    status: this.props.status,\n  };\n\n  statusChangeHandler = () => {\n    const status = this.state.status;\n    this.setState({ status: !status });\n  };\n\n  deleteTodoHandler = () => {\n    const id = this.props.id;\n    this.props.deleteTodoHandler(id);\n  };\n\n  render() {\n    const styles = {\n      backgroundColor: this.state.status ? \"#e3f6f5\" : \"#bae8e8\",\n      fontSize: \"1.5rem\",\n      width: \"50%\",\n      margin: \"0.5rem auto\",\n      padding: \"5px\",\n      borderRadius: \"5px\",\n    };\n    return (\n      <React.Fragment>\n        <p style={styles}>\n          {this.props.title}{\" \"}\n          <input\n            onClick={this.statusChangeHandler}\n            type=\"checkbox\"\n            name=\"Checkbox\"\n            id=\"\"\n          />\n          <input\n            className=\"delete btn btn-danger mr\"\n            type=\"button\"\n            value=\"Delete\"\n            onClick={this.deleteTodoHandler}\n          />\n        </p>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Todo;\n","import React, { useState } from \"react\";\n\nconst AddTodo = (props) => {\n  const [title, setTitle] = useState(\"\");\n  const newTodo = {\n    id: props.newId + 1,\n    title: title,\n    completed: false,\n  };\n  const addItemHandler = (e) => {\n    e.preventDefault();\n    props.addTodoHandler(newTodo);\n    setTitle(\"\");\n  };\n  const onChange = (e) => {\n    setTitle(e.target.value);\n  };\n  return (\n    <div>\n      <form onSubmit={addItemHandler}>\n        <input\n          className=\"form-control\"\n          type=\"text\"\n          value={newTodo.title}\n          onChange={onChange}\n        />\n        <input className=\"btn btn-primary add-item\" type=\"submit\" />\n      </form>\n    </div>\n  );\n};\n\nexport default AddTodo;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Todo from \"./components/Todo\";\nimport AddTodo from \"./components/AddTodo\";\n\nclass App extends Component {\n  state = {\n    todos: [\n      {\n        id: 0,\n      },\n    ],\n  };\n\n  deleteTodoHandler = (id) => {\n    this.setState({\n      todos: [...this.state.todos.filter((todo) => todo.id !== id)],\n    });\n  };\n\n  addTodoHandler = (id) => {\n    console.log(id);\n    const newItem = this.state.todos.concat(id);\n    this.setState({ todos: newItem });\n  };\n\n  render() {\n    const filterTodos = this.state.todos.filter((todo) => todo.id > 0);\n    const todos = filterTodos.map((todo) => (\n      <Todo\n        key={todo.id}\n        id={todo.id}\n        title={todo.title}\n        status={todo.completed}\n        deleteTodoHandler={this.deleteTodoHandler}\n      />\n    ));\n\n    const newId = this.state.todos[this.state.todos.length - 1].id;\n\n    const addTodo = (\n      <AddTodo newId={newId} addTodoHandler={this.addTodoHandler} />\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Things To Do</h1>\n        <div style={{ marginTop: \"50px\" }}>{todos}</div>\n        <div>{addTodo}</div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}